{"version":3,"sources":["../../src/rules/checkPropertyNames.js"],"names":["validatePropertyNames","targetTagName","enableFixer","jsdoc","jsdocNode","utils","propertyTags","Object","entries","tags","filter","tag","some","index","tagsIndex","dupeTagInfo","find","tgsIndex","tg","idx","name","reportJSDoc","removeTag","validatePropertyNamesDeep","jsdocPropertyNames","report","lastRealProperty","jsdocPropertyName","isPropertyPath","includes","pathRootNodeName","slice","indexOf","endsWith","context","options","jsdocPropertyNamesDeep","getJsdocTagsDeep","length","getPreferredTagName","tagName","isError","iterateAllJsdocs","meta","docs","description","url","fixable","schema","additionalProperties","properties","type"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\n/**\n * @param {string} targetTagName\n * @param {boolean} enableFixer\n * @param jsdoc\n * @param jsdocNode\n * @param utils\n * @returns {boolean}\n */\nconst validatePropertyNames = (\n  targetTagName,\n  enableFixer,\n  jsdoc, jsdocNode, utils,\n) => {\n  const propertyTags = Object.entries(jsdoc.tags).filter(([\n    , tag,\n  ]) => {\n    return tag.tag === targetTagName;\n  });\n\n  return propertyTags.some(([\n    , tag,\n  ], index) => {\n    let tagsIndex;\n    const dupeTagInfo = propertyTags.find(([\n      tgsIndex,\n      tg,\n    ], idx) => {\n      tagsIndex = tgsIndex;\n\n      return tg.name === tag.name && idx !== index;\n    });\n    if (dupeTagInfo) {\n      utils.reportJSDoc(`Duplicate @${targetTagName} \"${tag.name}\"`, dupeTagInfo[1], enableFixer ? () => {\n        utils.removeTag(tagsIndex);\n      } : null);\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\n/**\n * @param {string} targetTagName\n * @param {string[]} jsdocPropertyNames\n * @param jsdoc\n * @param {Function} report\n */\nconst validatePropertyNamesDeep = (\n  targetTagName,\n  jsdocPropertyNames, jsdoc, report,\n) => {\n  let lastRealProperty;\n\n  return jsdocPropertyNames.some(({\n    name: jsdocPropertyName,\n    idx,\n  }) => {\n    const isPropertyPath = jsdocPropertyName.includes('.');\n\n    if (isPropertyPath) {\n      if (!lastRealProperty) {\n        report(`@${targetTagName} path declaration (\"${jsdocPropertyName}\") appears before any real property.`, null, jsdoc.tags[idx]);\n\n        return true;\n      }\n\n      let pathRootNodeName = jsdocPropertyName.slice(0, jsdocPropertyName.indexOf('.'));\n\n      if (pathRootNodeName.endsWith('[]')) {\n        pathRootNodeName = pathRootNodeName.slice(0, -2);\n      }\n\n      if (pathRootNodeName !== lastRealProperty) {\n        report(\n          `@${targetTagName} path declaration (\"${jsdocPropertyName}\") root node name (\"${pathRootNodeName}\") ` +\n          `does not match previous real property name (\"${lastRealProperty}\").`,\n          null,\n          jsdoc.tags[idx],\n        );\n\n        return true;\n      }\n    } else {\n      lastRealProperty = jsdocPropertyName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  jsdocNode,\n  report,\n  utils,\n}) => {\n  const {\n    enableFixer = false,\n  } = context.options[0] || {};\n  const jsdocPropertyNamesDeep = utils.getJsdocTagsDeep('property');\n  if (!jsdocPropertyNamesDeep.length) {\n    return;\n  }\n\n  const targetTagName = utils.getPreferredTagName({\n    tagName: 'property',\n  });\n  const isError = validatePropertyNames(\n    targetTagName,\n    enableFixer,\n    jsdoc,\n    jsdocNode,\n    utils,\n  );\n\n  if (isError) {\n    return;\n  }\n\n  validatePropertyNamesDeep(\n    targetTagName, jsdocPropertyNamesDeep, jsdoc, report,\n  );\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Ensures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-property-names',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          enableFixer: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkPropertyNames.js"}