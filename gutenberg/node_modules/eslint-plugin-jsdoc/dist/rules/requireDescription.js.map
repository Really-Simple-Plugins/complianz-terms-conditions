{"version":3,"sources":["../../src/rules/requireDescription.js"],"names":["checkDescription","description","trim","split","filter","Boolean","length","jsdoc","report","utils","context","avoidDocs","descriptionStyle","options","targetTagName","getPreferredTagName","skipReportingBlockedTag","tagName","isBlocked","blocked","getDescription","descTags","getPresentTags","tag","functionExamples","tags","example","name","getTagDescription","contextDefaults","meta","docs","url","schema","additionalProperties","properties","checkConstructors","default","type","checkGetters","checkSetters","contexts","items","anyOf","comment","enum","exemptedBy"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nconst checkDescription = (description) => {\n  return description\n    .trim()\n    .split('\\n')\n    .filter(Boolean)\n    .length;\n};\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils,\n  context,\n}) => {\n  if (utils.avoidDocs()) {\n    return;\n  }\n\n  const {\n    descriptionStyle = 'body',\n  } = context.options[0] || {};\n\n  let targetTagName = utils.getPreferredTagName({\n    // We skip reporting except when `@description` is essential to the rule,\n    //  so user can block the tag and still meaningfully use this rule\n    //  even if the tag is present (and `check-tag-names` is the one to\n    //  normally report the fact that it is blocked but present)\n    skipReportingBlockedTag: descriptionStyle !== 'tag',\n    tagName: 'description',\n  });\n  if (!targetTagName) {\n    return;\n  }\n\n  const isBlocked = typeof targetTagName === 'object' && targetTagName.blocked;\n  if (isBlocked) {\n    targetTagName = targetTagName.tagName;\n  }\n\n  if (descriptionStyle !== 'tag') {\n    const {\n      description,\n    } = utils.getDescription();\n    if (checkDescription(description || '')) {\n      return;\n    }\n\n    if (descriptionStyle === 'body') {\n      const descTags = utils.getPresentTags([\n        'desc', 'description',\n      ]);\n      if (descTags.length) {\n        const [\n          {\n            tag: tagName,\n          },\n        ] = descTags;\n        report(`Remove the @${tagName} tag to leave a plain block description or add additional description text above the @${tagName} line.`);\n      } else {\n        report('Missing JSDoc block description.');\n      }\n\n      return;\n    }\n  }\n\n  const functionExamples = isBlocked ?\n    [] :\n    jsdoc.tags.filter(({\n      tag,\n    }) => {\n      return tag === targetTagName;\n    });\n\n  if (!functionExamples.length) {\n    report(\n      descriptionStyle === 'any' ?\n        `Missing JSDoc block description or @${targetTagName} declaration.` :\n        `Missing JSDoc @${targetTagName} declaration.`,\n    );\n\n    return;\n  }\n\n  for (const example of functionExamples) {\n    if (!checkDescription(`${example.name} ${utils.getTagDescription(example)}`)) {\n      report(`Missing JSDoc @${targetTagName} description.`, null, example);\n    }\n  }\n}, {\n  contextDefaults: true,\n  meta: {\n    docs: {\n      description: 'Requires that all functions have a description.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-description',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          checkConstructors: {\n            default: true,\n            type: 'boolean',\n          },\n          checkGetters: {\n            default: true,\n            type: 'boolean',\n          },\n          checkSetters: {\n            default: true,\n            type: 'boolean',\n          },\n          contexts: {\n            items: {\n              anyOf: [\n                {\n                  type: 'string',\n                },\n                {\n                  additionalProperties: false,\n                  properties: {\n                    comment: {\n                      type: 'string',\n                    },\n                    context: {\n                      type: 'string',\n                    },\n                  },\n                  type: 'object',\n                },\n              ],\n            },\n            type: 'array',\n          },\n          descriptionStyle: {\n            enum: [\n              'body', 'tag', 'any',\n            ],\n            type: 'string',\n          },\n          exemptedBy: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"requireDescription.js"}