{"version":3,"sources":["../../src/rules/checkParamNames.js"],"names":["validateParameterNames","targetTagName","allowExtraTrailingParamDocs","checkDestructured","checkRestProperty","checkTypesRegex","disableExtraPropertyReporting","enableFixer","functionParameterNames","jsdoc","_jsdocNode","utils","report","paramTags","Object","entries","tags","filter","tag","paramTagsNonNested","name","includes","dotted","some","index","tagsIndex","dupeTagInfo","find","tgsIndex","tg","idx","reportJSDoc","removeTag","functionParameterName","Array","isArray","type","search","parameterName","names","properties","hasPropertyRest","rests","annotationParamName","undefined","trim","tagName","expectedNames","map","actualNames","paramTag","actualTypes","missingProperties","notCheckingNames","notCheckingName","startsWith","actualNameIdx","findIndex","actualName","comparePaths","missingIndex","pathDoesNotBeginWith","line","source","number","length","push","tagPlacement","hasMissing","missingProperty","extraProperties","match","prop","split","extraProperty","funcParamName","item","join","validateParameterNamesDeep","_allowExtraTrailingParamDocs","jsdocParameterNames","lastRealParameter","jsdocParameterName","isPropertyPath","pathRootNodeName","slice","indexOf","endsWith","context","jsdocNode","checkTypesPattern","useDefaultObjectProperties","options","getRegexFromString","jsdocParameterNamesDeep","getJsdocTagsDeep","getFunctionParameterNames","getPreferredTagName","isError","meta","docs","description","url","fixable","schema","additionalProperties"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\n/**\n * @param {string} targetTagName\n * @param {boolean} allowExtraTrailingParamDocs\n * @param {boolean} checkDestructured\n * @param {boolean} checkRestProperty\n * @param {RegExp} checkTypesRegex\n * @param {boolean} disableExtraPropertyReporting\n * @param {boolean} enableFixer\n * @param {Array<string>} functionParameterNames\n * @param jsdoc\n * @param _jsdocNode\n * @param utils\n * @param report\n * @returns {boolean}\n */\nconst validateParameterNames = (\n  targetTagName,\n  allowExtraTrailingParamDocs,\n  checkDestructured,\n  checkRestProperty,\n  checkTypesRegex,\n  disableExtraPropertyReporting,\n  enableFixer,\n  functionParameterNames, jsdoc, _jsdocNode, utils, report,\n) => {\n  const paramTags = Object.entries(jsdoc.tags).filter(([\n    , tag,\n  ]) => {\n    return tag.tag === targetTagName;\n  });\n  const paramTagsNonNested = paramTags.filter(([\n    , tag,\n  ]) => {\n    return !tag.name.includes('.');\n  });\n\n  let dotted = 0;\n\n  // eslint-disable-next-line complexity\n  return paramTags.some(([\n    , tag,\n  ], index) => {\n    let tagsIndex;\n    const dupeTagInfo = paramTags.find(([\n      tgsIndex,\n      tg,\n    ], idx) => {\n      tagsIndex = tgsIndex;\n\n      return tg.name === tag.name && idx !== index;\n    });\n    if (dupeTagInfo) {\n      utils.reportJSDoc(`Duplicate @${targetTagName} \"${tag.name}\"`, dupeTagInfo[1], enableFixer ? () => {\n        utils.removeTag(tagsIndex);\n      } : null);\n\n      return true;\n    }\n\n    if (tag.name.includes('.')) {\n      dotted++;\n\n      return false;\n    }\n\n    const functionParameterName = functionParameterNames[index - dotted];\n\n    if (!functionParameterName) {\n      if (allowExtraTrailingParamDocs) {\n        return false;\n      }\n\n      report(\n        `@${targetTagName} \"${tag.name}\" does not match an existing function parameter.`,\n        null,\n        tag,\n      );\n\n      return true;\n    }\n\n    if (Array.isArray(functionParameterName)) {\n      if (!checkDestructured) {\n        return false;\n      }\n\n      if (tag.type && tag.type.search(checkTypesRegex) === -1) {\n        return false;\n      }\n\n      const [\n        parameterName,\n        {\n          names: properties,\n          hasPropertyRest,\n          rests,\n          annotationParamName,\n        },\n      ] = functionParameterName;\n      if (annotationParamName !== undefined) {\n        const name = tag.name.trim();\n        if (name !== annotationParamName) {\n          report(`@${targetTagName} \"${name}\" does not match parameter name \"${annotationParamName}\"`, null, tag);\n        }\n      }\n\n      const tagName = parameterName === undefined ? tag.name.trim() : parameterName;\n      const expectedNames = properties.map((name) => {\n        return `${tagName}.${name}`;\n      });\n      const actualNames = paramTags.map(([\n        , paramTag,\n      ]) => {\n        return paramTag.name.trim();\n      });\n      const actualTypes = paramTags.map(([\n        , paramTag,\n      ]) => {\n        return paramTag.type;\n      });\n\n      const missingProperties = [];\n      const notCheckingNames = [];\n\n      for (const [\n        idx,\n        name,\n      ] of expectedNames.entries()) {\n        if (notCheckingNames.some((notCheckingName) => {\n          return name.startsWith(notCheckingName);\n        })) {\n          continue;\n        }\n\n        const actualNameIdx = actualNames.findIndex((actualName) => {\n          return utils.comparePaths(name)(actualName);\n        });\n        if (actualNameIdx === -1) {\n          if (!checkRestProperty && rests[idx]) {\n            continue;\n          }\n\n          const missingIndex = actualNames.findIndex((actualName) => {\n            return utils.pathDoesNotBeginWith(name, actualName);\n          });\n          const line = tag.source[0].number - 1 + (missingIndex > -1 ? missingIndex : actualNames.length);\n          missingProperties.push({\n            name,\n            tagPlacement: {\n              line: line === 0 ? 1 : line,\n            },\n          });\n        } else if (actualTypes[actualNameIdx].search(checkTypesRegex) === -1 && actualTypes[actualNameIdx] !== '') {\n          notCheckingNames.push(name);\n        }\n      }\n\n      const hasMissing = missingProperties.length;\n      if (hasMissing) {\n        for (const {\n          tagPlacement,\n          name: missingProperty,\n        } of missingProperties) {\n          report(`Missing @${targetTagName} \"${missingProperty}\"`, null, tagPlacement);\n        }\n      }\n\n      if (!hasPropertyRest || checkRestProperty) {\n        const extraProperties = [];\n        for (const [\n          idx,\n          name,\n        ] of actualNames.entries()) {\n          const match = name.startsWith(tag.name.trim() + '.');\n          if (\n            match && !expectedNames.some(\n              utils.comparePaths(name),\n            ) && !utils.comparePaths(name)(tag.name) &&\n            (!disableExtraPropertyReporting || properties.some((prop) => {\n              return prop.split('.').length >= name.split('.').length - 1;\n            }))\n          ) {\n            extraProperties.push([\n              name, paramTags[idx][1],\n            ]);\n          }\n        }\n\n        if (extraProperties.length) {\n          for (const [\n            extraProperty,\n            tg,\n          ] of extraProperties) {\n            report(`@${targetTagName} \"${extraProperty}\" does not exist on ${tag.name}`, null, tg);\n          }\n\n          return true;\n        }\n      }\n\n      return hasMissing;\n    }\n\n    let funcParamName;\n    if (typeof functionParameterName === 'object') {\n      const {\n        name,\n      } = functionParameterName;\n      funcParamName = name;\n    } else {\n      funcParamName = functionParameterName;\n    }\n\n    if (funcParamName !== tag.name.trim()) {\n      // Todo: Improve for array or object child items\n      const actualNames = paramTagsNonNested.map(([\n        , {\n          name,\n        },\n      ]) => {\n        return name.trim();\n      });\n      const expectedNames = functionParameterNames.map((item, idx) => {\n        if (item?.[1]?.names) {\n          return actualNames[idx];\n        }\n\n        return item;\n      }).join(', ');\n\n      report(\n        `Expected @${targetTagName} names to be \"${expectedNames}\". Got \"${actualNames.join(', ')}\".`,\n        null,\n        tag,\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\n/**\n * @param {string} targetTagName\n * @param {boolean} _allowExtraTrailingParamDocs\n * @param {Array<string>} jsdocParameterNames\n * @param jsdoc\n * @param {Function} report\n * @returns {boolean}\n */\nconst validateParameterNamesDeep = (\n  targetTagName, _allowExtraTrailingParamDocs,\n  jsdocParameterNames, jsdoc, report,\n) => {\n  let lastRealParameter;\n\n  return jsdocParameterNames.some(({\n    name: jsdocParameterName,\n    idx,\n  }) => {\n    const isPropertyPath = jsdocParameterName.includes('.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report(`@${targetTagName} path declaration (\"${jsdocParameterName}\") appears before any real parameter.`, null, jsdoc.tags[idx]);\n\n        return true;\n      }\n\n      let pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName.endsWith('[]')) {\n        pathRootNodeName = pathRootNodeName.slice(0, -2);\n      }\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report(\n          `@${targetTagName} path declaration (\"${jsdocParameterName}\") root node name (\"${pathRootNodeName}\") ` +\n          `does not match previous real parameter name (\"${lastRealParameter}\").`,\n          null,\n          jsdoc.tags[idx],\n        );\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  jsdocNode,\n  report,\n  utils,\n}) => {\n  const {\n    allowExtraTrailingParamDocs,\n    checkDestructured = true,\n    checkRestProperty = false,\n    checkTypesPattern = '/^(?:[oO]bject|[aA]rray|PlainObject|Generic(?:Object|Array))$/',\n    enableFixer = false,\n    useDefaultObjectProperties = false,\n    disableExtraPropertyReporting = false,\n  } = context.options[0] || {};\n\n  const checkTypesRegex = utils.getRegexFromString(checkTypesPattern);\n\n  const jsdocParameterNamesDeep = utils.getJsdocTagsDeep('param');\n  if (!jsdocParameterNamesDeep.length) {\n    return;\n  }\n\n  const functionParameterNames = utils.getFunctionParameterNames(useDefaultObjectProperties);\n  const targetTagName = utils.getPreferredTagName({\n    tagName: 'param',\n  });\n  const isError = validateParameterNames(\n    targetTagName,\n    allowExtraTrailingParamDocs,\n    checkDestructured,\n    checkRestProperty,\n    checkTypesRegex,\n    disableExtraPropertyReporting,\n    enableFixer,\n    functionParameterNames,\n    jsdoc,\n    jsdocNode,\n    utils,\n    report,\n  );\n\n  if (isError || !checkDestructured) {\n    return;\n  }\n\n  validateParameterNamesDeep(\n    targetTagName, allowExtraTrailingParamDocs, jsdocParameterNamesDeep, jsdoc, report,\n  );\n}, {\n  meta: {\n    docs: {\n      description: 'Ensures that parameter names in JSDoc match those in the function declaration.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-param-names',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          allowExtraTrailingParamDocs: {\n            type: 'boolean',\n          },\n          checkDestructured: {\n            type: 'boolean',\n          },\n          checkRestProperty: {\n            type: 'boolean',\n          },\n          checkTypesPattern: {\n            type: 'string',\n          },\n          disableExtraPropertyReporting: {\n            type: 'boolean',\n          },\n          enableFixer: {\n            type: 'boolean',\n          },\n          useDefaultObjectProperties: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkParamNames.js"}